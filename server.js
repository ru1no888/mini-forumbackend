// server.js

// 1. ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
require('dotenv').config(); 
const express = require('express');
const { createClient } = require('@supabase/supabase-js');
const cors = require('cors');
const mongoose = require('mongoose'); // ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB

const app = express();
const port = process.env.PORT || 3000;

// 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Supabase Client (PostgreSQL)
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// 3. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÅ‡∏•‡∏∞ Model
const mongoURI = process.env.MONGO_URI; 
mongoose.connect(mongoURI).then(() => {
    console.log('‚úÖ MongoDB Atlas connected successfully.');
}).catch(err => {
    // üõë ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error: Server ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ Log System
    console.error('‚ùå MongoDB connection error, LOGS DISABLED:', err.message);
});

// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á MongoDB Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Activity Logs
const ActivityLogSchema = new mongoose.Schema({
    timestamp: { type: Date, default: Date.now },
    userId: { type: Number, required: true },
    action: { type: String, required: true },
    details: { type: mongoose.Schema.Types.Mixed },
}, { collection: 'activity_logs' });
const ActivityLog = mongoose.model('ActivityLog', ActivityLogSchema); 


// 5. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Middleware (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô API Endpoints ‡πÄ‡∏™‡∏°‡∏≠)
app.use(cors()); 
app.use(express.json()); 


// 6. API Endpoint: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (GET /api/threads)
app.get('/api/threads', async (req, res) => {
    
    // A. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (mongoose.connection.readyState === 1) { 
        try {
            await ActivityLog.create({
                userId: 0, 
                action: 'GET_THREADS_REQUEST',
                details: { ip: req.ip || 'Unknown' }
            });
        } catch (logError) {
            console.error("Failed to record log to MongoDB:", logError);
        }
    }

    // B. ‡πÉ‡∏ä‡πâ Supabase Client ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { data: threads, error } = await supabase
        .from('threads') 
        .select(`
            id, 
            title, 
            created_at,
            categories(name), 
            users(username) 
        `) 
        .order('created_at', { ascending: false }); 
    
    // C. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Response
    if (error) {
        console.error('Error fetching threads:', error);
        return res.status(500).json({ error: 'Failed to fetch threads from database.' });
    }
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
    res.status(200).json(threads);
});


// 7. API Endpoint: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà (POST /api/threads)
// üõë ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ Endpoint ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô /api/threads ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö RESTful API
app.post('/api/threads', async (req, res) => { 
    const { title, content, userId, categoryId } = req.body;

    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ (Thread)
    const { data: threadData, error: threadError } = await supabase
        .from('threads')
        .insert([{ title, user_id: userId, category_id: categoryId }])
        .select('id') // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ID
        .single(); 

    if (threadError) {
        console.error('Error creating thread:', threadError);
        return res.status(500).json({ error: 'Failed to create thread.', details: threadError.message });
    }

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏£‡∏Å (Original Post)
    const { error: postError } = await supabase
        .from('posts')
        .insert([{ 
            content: content, 
            user_id: userId, 
            thread_id: threadData.id, 
            is_original_post: true 
        }]);

    if (postError) {
        console.error('Error creating post:', postError);
        return res.status(500).json({ error: 'Failed to create original post.' });
    }
    
    // D. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (mongoose.connection.readyState === 1) { 
        try {
            await ActivityLog.create({
                userId: userId, 
                action: 'CREATE_THREAD_SUCCESS',
                details: { threadId: threadData.id, title: title }
            });
        } catch (logError) {
            console.error("Failed to record post log to MongoDB:", logError);
        }
    }

    res.status(201).json({ 
        message: 'Thread and original post created successfully', 
        threadId: threadData.id 
    });
});

// üÜï 8. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Endpoint: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (POST /api/auth/register)
// üõë ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Endpoint ‡∏ó‡∏µ‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
app.post('/api/auth/register', async (req, res) => {
    // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Supabase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    const { username, email, password } = req.body;
    
    if (!username || !email || !password) {
        return res.status(400).json({ error: 'Missing username, email, or password.' });
    }

    try {
        const passwordHash = 'DUMMY_HASH_' + Math.random().toString(36).substring(2, 15);
        
        // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users (Supabase)
        const { data: userData, error: userError } = await supabase
            .from('users')
            .insert([{ username, email, password_hash: passwordHash }])
            .select('id')
            .single();

        if (userError) {
            return res.status(409).json({ error: 'Registration failed. Username or email may already be in use.', details: userError.message });
        }
        
        const newUserId = userData.id;

        // 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó 'user' ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Role ID 1 ‡∏Ñ‡∏∑‡∏≠ 'user')
        await supabase.from('user_roles').insert([{ user_id: newUserId, role_id: 1 }]); 

        // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        if (mongoose.connection.readyState === 1) { 
            await ActivityLog.create({
                userId: newUserId, 
                action: 'USER_REGISTERED',
                details: { email: email }
            });
        }

        // 4. ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        res.status(201).json({ 
            message: 'Registration successful!', 
            userId: newUserId 
        });

    } catch (error) {
        console.error('Error during user registration:', error);
        return res.status(500).json({ error: 'Server error during registration process.' });
    }
});

// server.js (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô API Endpoints)

// üÜï 9. API Endpoint: ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (POST /api/auth/login)
app.post('/api/auth/login', async (req, res) => {
    // ‚ö†Ô∏è ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£ hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô!
    const { email, password } = req.body;
    
    if (!email || !password) {
        return res.status(400).json({ error: 'Missing email or password.' });
    }

    try {
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å email (Supabase)
        const { data: user, error } = await supabase
            .from('users')
            .select('id, username, password_hash')
            .eq('email', email)
            .single();

        if (error || !user) {
            return res.status(401).json({ error: 'Invalid credentials.' });
        }
        
        // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á: ‡πÉ‡∏ä‡πâ bcrypt.compare)
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MVP: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà‡∏ß‡πà‡∏≤ password ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        if (user.password_hash === 'DUMMY_HASH' && password !== '') {
            // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            
            // 3. üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Token (‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á: ‡πÉ‡∏ä‡πâ JWT)
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MVP: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô Token ‡∏à‡∏£‡∏¥‡∏á
            const token = { 
                userId: user.id, 
                username: user.username,
                role: 'user' // ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á role ‡∏à‡∏≤‡∏Å user_roles ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á
            };

            // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
            if (mongoose.connection.readyState === 1) { 
                await ActivityLog.create({
                    userId: user.id, 
                    action: 'USER_LOGIN_SUCCESS',
                    details: { email: email }
                });
            }

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞ Token ‡∏Å‡∏•‡∏±‡∏ö
            return res.status(200).json({ 
                message: 'Login successful', 
                token: token,
                user: { id: user.id, username: user.username }
            });
        } else {
            return res.status(401).json({ error: 'Invalid credentials.' });
        }

    } catch (error) {
        console.error('Error during user login:', error);
        return res.status(500).json({ error: 'Server error during login process.' });
    }
});